
type Prayers @aws_iam @aws_api_key {
  id: ID!
  Name: String
  Prayer: String
  numPraying: Int
  dateTime: AWSTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPrayersConnection @aws_api_key @aws_iam {
  items: [Prayers]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPrayersFilterInput {
  id: ModelIDInput
  Name: ModelStringInput
  Prayer: ModelStringInput
  numPraying: ModelIntInput
  dateTime: ModelStringInput
  and: [ModelPrayersFilterInput]
  or: [ModelPrayersFilterInput]
  not: ModelPrayersFilterInput
}

type Query {
  getPrayers(id: ID!): Prayers @aws_api_key @aws_iam
  listPrayers(filter: ModelPrayersFilterInput, limit: Int, nextToken: String): ModelPrayersConnection @aws_api_key @aws_iam
  syncPrayers(filter: ModelPrayersFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPrayersConnection @aws_api_key @aws_iam
}

input ModelPrayersConditionInput {
  Name: ModelStringInput
  Prayer: ModelStringInput
  numPraying: ModelIntInput
  dateTime: ModelStringInput
  and: [ModelPrayersConditionInput]
  or: [ModelPrayersConditionInput]
  not: ModelPrayersConditionInput
}

input CreatePrayersInput {
  id: ID
  Name: String
  Prayer: String
  numPraying: Int
  dateTime: AWSTime
  _version: Int
}

input UpdatePrayersInput {
  id: ID!
  Name: String
  Prayer: String
  numPraying: Int
  dateTime: AWSTime
  _version: Int
}

input DeletePrayersInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPrayers(input: CreatePrayersInput!, condition: ModelPrayersConditionInput): Prayers @aws_api_key @aws_iam
  updatePrayers(input: UpdatePrayersInput!, condition: ModelPrayersConditionInput): Prayers @aws_api_key @aws_iam
  deletePrayers(input: DeletePrayersInput!, condition: ModelPrayersConditionInput): Prayers @aws_api_key @aws_iam
}

type Subscription {
  onCreatePrayers: Prayers @aws_subscribe(mutations: ["createPrayers"]) @aws_api_key @aws_iam
  onUpdatePrayers: Prayers @aws_subscribe(mutations: ["updatePrayers"]) @aws_api_key @aws_iam
  onDeletePrayers: Prayers @aws_subscribe(mutations: ["deletePrayers"]) @aws_api_key @aws_iam
}

